#ifndef SCROLLING_TEXT_H
#define SCROLLING_TEXT_H

#include "Arduino.h"
#include "MatrixDisplay.h"
#include <avr/pgmspace.h>

const byte spriteA[] PROGMEM = {B00000000, B00100000, B01010000, B10001000, B10001000, B11111000, B10001000, B10001000}; //A
const byte spriteB[] PROGMEM = {B00000000, B11110000, B01001000, B01001000, B01110000, B01001000, B01001000, B11110000}; //B
const byte spriteC[] PROGMEM = {B00000000, B01110000, B10001000, B10000000, B10000000, B10000000, B10001000, B01110000}; //C
const byte spriteD[] PROGMEM = {B00000000, B11110000, B01001000, B01001000, B01001000, B01001000, B01001000, B11110000}; //D
const byte spriteE[] PROGMEM = {B00000000, B11111000, B10000000, B10000000, B11110000, B10000000, B10000000, B11111000}; //E
const byte spriteF[] PROGMEM = {B00000000, B11111000, B10000000, B10000000, B11110000, B10000000, B10000000, B10000000}; //F
const byte spriteG[] PROGMEM = {B00000000, B01110000, B10001000, B10000000, B10011000, B10001000, B10001000, B01111000}; //G
const byte spriteH[] PROGMEM = {B00000000, B10001000, B10001000, B10001000, B11111000, B10001000, B10001000, B10001000}; //H
const byte spriteI[] PROGMEM = {B00000000, B01110000, B00100000, B00100000, B00100000, B00100000, B00100000, B01110000}; //I
const byte spriteJ[] PROGMEM = {B00000000, B00111000, B00010000, B00010000, B00010000, B00010000, B10010000, B01100000}; //J
const byte spriteK[] PROGMEM = {B00000000, B10001000, B10010000, B10100000, B11000000, B10100000, B10010000, B10001000}; //K
const byte spriteL[] PROGMEM = {B00000000, B10000000, B10000000, B10000000, B10000000, B10000000, B10000000, B11111000}; //L
const byte spriteM[] PROGMEM = {B00000000, B10001000, B11011000, B10101000, B10101000, B10001000, B10001000, B10001000}; //M
const byte spriteN[] PROGMEM = {B00000000, B10001000, B10001000, B11001000, B10101000, B10011000, B10001000, B10001000}; //N
const byte spriteO[] PROGMEM = {B00000000, B01110000, B10001000, B10001000, B10001000, B10001000, B10001000, B01110000}; //O
const byte spriteP[] PROGMEM = {B00000000, B11110000, B10001000, B10001000, B11110000, B10000000, B10000000, B10000000}; //P
const byte spriteQ[] PROGMEM = {B00000000, B01110000, B10001000, B10001000, B10001000, B10101000, B10010000, B01101000}; //Q
const byte spriteR[] PROGMEM = {B00000000, B01110000, B10001000, B10001000, B11110000, B10100000, B10010000, B10001000}; //R
const byte spriteS[] PROGMEM = {B00000000, B01110000, B10001000, B10000000, B01110000, B00001000, B10001000, B01110000}; //S
const byte spriteT[] PROGMEM = {B00000000, B11111000, B00100000, B00100000, B00100000, B00100000, B00100000, B00100000}; //T
const byte spriteU[] PROGMEM = {B00000000, B10001000, B10001000, B10001000, B10001000, B10001000, B10001000, B01110000}; //U
const byte spriteV[] PROGMEM = {B00000000, B10001000, B10001000, B10001000, B10001000, B10001000, B01010000, B00100000}; //V
const byte spriteW[] PROGMEM = {B00000000, B10001000, B10001000, B10001000, B10101000, B10101000, B10101000, B01010000}; //W
const byte spriteX[] PROGMEM = {B00000000, B10001000, B10001000, B01010000, B00100000, B01010000, B10001000, B10001000}; //X
const byte spriteY[] PROGMEM = {B00000000, B10001000, B10001000, B10001000, B01010000, B00100000, B00100000, B00100000}; //Y
const byte spriteZ[] PROGMEM = {B00000000, B11111000, B00001000, B00010000, B00100000, B01000000, B10000000, B11111000}; //Z
const byte* const letterTable[] PROGMEM = {spriteA, spriteB, spriteC, spriteD, spriteE, spriteF, spriteG, spriteH, spriteI,
                                           spriteJ, spriteK, spriteL, spriteM, spriteN, spriteO, spriteP, spriteQ, spriteR,
                                           spriteS, spriteT, spriteU, spriteV, spriteW, spriteX, spriteY, spriteZ};

const byte sprite0[] PROGMEM = {B00000000, B01110000, B10001000, B10011000, B10101000, B11001000, B10001000, B01110000}; //0
const byte sprite1[] PROGMEM = {B00000000, B00100000, B01100000, B00100000, B00100000, B00100000, B00100000, B01110000}; //1
const byte sprite2[] PROGMEM = {B00000000, B01110000, B10001000, B00001000, B00110000, B01000000, B10000000, B11111000}; //2
const byte sprite3[] PROGMEM = {B00000000, B01110000, B10001000, B00001000, B00110000, B00001000, B10001000, B01110000}; //3
const byte sprite4[] PROGMEM = {B00000000, B00010000, B00110000, B01010000, B10010000, B11111000, B00010000, B00010000}; //4
const byte sprite5[] PROGMEM = {B00000000, B11111000, B10000000, B11110000, B00001000, B00001000, B10001000, B01110000}; //5
const byte sprite6[] PROGMEM = {B00000000, B00110000, B01000000, B10000000, B11110000, B10001000, B10001000, B01110000}; //6
const byte sprite7[] PROGMEM = {B00000000, B11111000, B00001000, B00010000, B00100000, B01000000, B01000000, B01000000}; //7
const byte sprite8[] PROGMEM = {B00000000, B01110000, B10001000, B10001000, B01110000, B10001000, B10001000, B01110000}; //8
const byte sprite9[] PROGMEM = {B00000000, B01110000, B10001000, B10001000, B01111000, B00001000, B00010000, B01100000}; //9
const byte* const numberTable[] PROGMEM = {sprite0, sprite1, sprite2, sprite3, sprite4,
                                           sprite5, sprite6, sprite7, sprite8, sprite9};

const byte spriteQuestion[] PROGMEM     = {B00000000, B01110000, B10001000, B00001000, B00010000, B00100000, B00000000, B00100000}; // ?
const byte spriteExclamation[] PROGMEM  = {B00000000, B00100000, B00100000, B00100000, B00100000, B00100000, B00000000, B00100000}; // !
const byte spriteUnderscore[] PROGMEM   = {B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B00000000, B11111000}; // _
const byte spriteHashtag[] PROGMEM      = {B00000000, B01010000, B01010000, B11111000, B01010000, B11111000, B01010000, B01010000}; // #
const byte spriteDollar[] PROGMEM       = {B00000000, B00100000, B01111000, B10100000, B01110000, B00101000, B11110000, B00100000}; // $
const byte spriteOpenBracket[] PROGMEM  = {B00000000, B00010000, B00100000, B01000000, B01000000, B01000000, B00100000, B00010000}; // (
const byte spriteCloseBracket[] PROGMEM = {B00000000, B01000000, B00100000, B00010000, B00010000, B00010000, B00100000, B01000000}; // )
const byte spritePlus[] PROGMEM         = {B00000000, B00000000, B00100000, B00100000, B11111000, B00100000, B00100000, B00000000}; // +
const byte spriteMinus[] PROGMEM        = {B00000000, B00000000, B00000000, B00000000, B11111000, B00000000, B00000000, B00000000}; // -
const byte spriteSlash[] PROGMEM        = {B00000000, B00000000, B00001000, B00010000, B00100000, B01000000, B10000000, B00000000}; // /
const byte spriteColon[] PROGMEM        = {B00000000, B00000000, B01100000, B01100000, B00000000, B01100000, B01100000, B00000000}; // :
const byte spriteSemicolon[] PROGMEM    = {B00000000, B00000000, B01100000, B01100000, B00000000, B01100000, B00100000, B01000000}; // ;
const byte spriteEqual[] PROGMEM        = {B00000000, B00000000, B00000000, B11111000, B00000000, B11111000, B00000000, B00000000}; // =

/*
 * Class that handles scrolling text on the 8x8 matrix.
 * Use the function scrollText to begin displaying a message.
 * Scrolling ends after the whole message is displayed or
 * after the button was pressed.
 */
class ScrollingText {
    private:
        int frame[8][8];
        unsigned long oldTime;
        unsigned long currentTime;
        static const unsigned long delayTime = 70;
    public:
        ScrollingText();
        int scrollText(const char* text);
        void appendLetterColumn(const char letter, int column);
        byte getLetterByte(const char letter, int row);
        void shiftMatrixLeft();
};

#endif //SCROLLING_TEXT_H
